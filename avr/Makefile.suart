
# this Makefile.lufa builds irmetermon for running on a UART-less
# AVR, using the software uart code in suart.c.  i used the attiny44,
# perhaps because i already owned one.  the suart code currently
# wants a 16-bit timer, so using an attiny45/85 would require some
# work (but i think it could be done).

VERSION = $(shell date +%y%m%d-%H%M)

MCU = attiny44
F_CPU = 1000000
OURDEFS = -DUSE_SUART -DIRMETERMON_VERSION="\"$(VERSION)\""
OURDEFS += -DIRMETER_ATTINY44
# OURDEFS += -DMINIMAL_MONITOR
OURDEFS += -DMONITOR

# location of cross-compiler -- edit to suit
#CROSS = /opt/avr-gcc-070314/bin/avr-
CROSS = avr-

CC=$(CROSS)gcc
LD=$(CROSS)gcc
NM=$(CROSS)nm
SIZE=$(CROSS)size
OBJCOPY = $(CROSS)objcopy
OBJDUMP = $(CROSS)objdump

CFLAGS = -c -Os -Wwrite-strings -Wall -mmcu=$(MCU)
CFLAGS += -DF_CPU=$(F_CPU)UL
CFLAGS += -Wa,-adhlns=$(<:%.c=%.lst)
CFLAGS += -ffunction-sections
LFLAGS = -mmcu=$(MCU)
LFLAGS += -Wl,--gc-sections -Wl

HOSTCC = gcc

PROG = irmetermon
SRCS = main-suart.c irmeter.c suart.c timer.c monitor.c
OBJS = $(SRCS:%.c=%.o)
HDRS = suart.h common.h timer.h irmeter.h


CFLAGS += $(OURDEFS)


all: $(PROG).hex $(PROG).lss

$(OBJS): $(HDRS) Makefile.suart

$(PROG).out: $(OBJS) $(HDRS)
	@-test -f $(PROG).out && (echo size was: ; $(SIZE) $(PROG).out)
	$(LD) -o $@ $(LFLAGS) $(OBJS)
	$(NM) -n $@ >$(PROG).map
	@echo size is:
	@$(SIZE) $(PROG).out

$(PROG).hex: $(PROG).out
	$(OBJCOPY) -R .eeprom -O ihex $^ $@

# Create extended listing file from ELF output file.
%.lss: %.out
	$(OBJDUMP) -h -S $< > $@


sizes: $(OBJS)
	@echo
	@echo Individual:
	$(SIZE) -t $(OBJS)
	@echo
	@echo Complete:
	$(SIZE) $(PROG).out


program:
	sudo avrdude -c usbtiny -p t44 -U $(PROG).hex

clean:
	rm -f *.o *.flash *.flash.* *.out *.map *.lst *.lss *.hex *.eep *.cof *.elf *.sym
	
clobber: clean
	rm -f $(PROG).hex


format:
	indent -kr -ts4 -i4 $(SRCS) $(HDRS)
	rm -f *.[ch]~
