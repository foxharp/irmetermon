
# Makefile for avr programs
# Paul Fox, April 2007, February 2009

# current code assumes ATTiny2313.  (it uses UART, 16 bit timer, and
# input capture event interrupt.)
# MCU = attiny2313
MCU = attiny44

# location of cross-compiler -- edit to suit
#CROSS = /opt/avr-gcc-070314/bin/avr-
CROSS = avr-

CC=$(CROSS)gcc
LD=$(CROSS)gcc
NM=$(CROSS)nm
SIZE=$(CROSS)size
OBJCOPY = $(CROSS)objcopy
OBJDUMP = $(CROSS)objdump

CFLAGS = -c -Os -Wwrite-strings -Wall -mmcu=$(MCU)
CFLAGS += -Wa,-adhlns=$(<:%.c=%.lst)
LFLAGS = -mmcu=$(MCU)

HOSTCC = gcc

PROG = irmetermon
SRCS = main-suart.c irmeter.c suart.c
OBJS = main-suart.o irmeter.o suart.o

CFLAGS += -DUSE_SUART

HDRS = suart.h main.h

VERSION = $(shell date +%y%m%d-%H%M)
CFLAGS += -DIRMETERMON_VERSION="\"$(VERSION)\""


all: $(PROG).hex $(PROG).lss

$(PROG).out: $(OBJS)
	@-test -f $(PROG).out && (echo size was: ; $(SIZE) $(PROG).out)
	$(LD) -o $@ $(LFLAGS) $(OBJS)
	$(NM) -n $@ >$(PROG).map
	@echo size is:
	@$(SIZE) $(PROG).out

$(PROG).hex: $(PROG).out
	$(OBJCOPY) -R .eeprom -O ihex $^ $@

# Create extended listing file from ELF output file.
%.lss: %.out
	$(OBJDUMP) -h -S $< > $@


sizes: $(OBJS)
	@echo
	@echo Individual:
	$(SIZE) -t $(OBJS)
	@echo
	@echo Complete:
	$(SIZE) $(PROG).out

tarball: all clean
	mkdir -p oldfiles
	mv $(PROG)-*.hex *.tar.gz oldfiles || true
	mv $(PROG).hex $(PROG)-$(VERSION).hex || true
	ln -s $(PROG) ../$(PROG)-$(VERSION)
	tar -C .. --dereference \
	    --exclude CVS \
	    --exclude oldfiles \
	    --exclude web \
	    --exclude '*.tar.gz' \
	    -czf ../$(PROG)-$(VERSION).tar.gz $(PROG)-$(VERSION)
	mv ../$(PROG)-$(VERSION).tar.gz .
	rm -f ../$(PROG)-$(VERSION)

foo.out: foo.o
	$(LD) -o $@ $(LFLAGS) foo.o
	$(NM) -n $@ >foo.map

clean:
	rm -f *.o *.flash *.flash.* *.out *.map *.lst *.lss 
	
clobber: clean
	rm -f $(PROG).hex

