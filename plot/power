#!/bin/bash

# the script is expected to live in the same directory
# as some of its datafiles
cd $(dirname $0)

IRM_logdir=/var/local/power	# where are the power logs?
IRM_tmp=/tmp/power		# create temporary files here

IRM_ssh_to_remote=false		# should we copy remotely?
IRM_sshhost=myserver		# remote server name
IRM_sshport=myport		# remote server port
IRM_sshuser=myremoteuser	# remote server user
IRM_webdir=/my/remote/path	# path on remote host

IRM_cp_to_local=false		# should we copy locally?
IRM_local_dest=/my/local/path	# path on local host

# fetch user overrides for the IRM_xxxx variables
test -f config && . config


mkdir -p $IRM_tmp

# since this will often run in the background, e.g., from cron, keep
# a log, and a copy of stderr, for when things go wrong.
# keep a copy of 
exec 2>$IRM_tmp/power.stderr
set -x  # turn on tracing

# knowing who ran the script can help debug permission issues.
id >&2

# need at most two days worth of by-minute logs for the 36 hour plot
minutelogs=$(ls $IRM_logdir/wH-by-minute/watt-hours*day.log | tail -2 )
# need at most seven days worth of by-ten-minute logs for the weeklong plot
tenminutelogs=$(ls $IRM_logdir/wH-by-ten-minute/watt-hours*day.log | tail -7 )


# make the plot names unique, which helps avoid browser caching issues,
which=$$


# gnuplot won't modify its plot based on command-line arguments,
# but it can use environment variables if you insert "`echo
# $MYVARIALE`" into the plot script.  so set variables to
# parameterize the individual plots.

cat $minutelogs | ./plotfix | tail -$(( 2 * 60)) >$IRM_tmp/2hr_wH	# data for this plot
rm -f $IRM_tmp/2hr_power.*.png				# clean up old plot(s)
PLOT_TITLE="Last 2 hours"			\
PLOT_DATAFILE=$IRM_tmp/2hr_wH			\
PLOT_OUTPUT=$IRM_tmp/2hr_power.$which.png	\
PLOT_wH_MINUTES=1				\
PLOT_MAX_wH=5000				\
PLOT_WITHSTYLE="with impulses"			\
PLOT_XTIC_SECONDS=1800				\
PLOT_MINOR_XTICS=6				\
    gnuplot power.plot

cat $minutelogs | ./plotfix | tail -$((12 * 60)) >$IRM_tmp/12hr_wH
rm -f $IRM_tmp/12hr_power.*.png
PLOT_TITLE="Last 12 hours"			\
PLOT_DATAFILE=$IRM_tmp/12hr_wH			\
PLOT_OUTPUT=$IRM_tmp/12hr_power.$which.png	\
PLOT_wH_MINUTES=1				\
PLOT_MAX_wH=5000				\
PLOT_WITHSTYLE="with lines"			\
PLOT_XTIC_SECONDS=3600				\
PLOT_MINOR_XTICS=6				\
    gnuplot power.plot

cat $minutelogs | ./plotfix | tail -$((36 * 60)) >$IRM_tmp/36hr_wH
rm -f $IRM_tmp/36hr_power.*.png
PLOT_TITLE="Last 36 hours"			\
PLOT_DATAFILE=$IRM_tmp/36hr_wH			\
PLOT_OUTPUT=$IRM_tmp/36hr_power.$which.png	\
PLOT_wH_MINUTES=1				\
PLOT_MAX_wH=5000				\
PLOT_WITHSTYLE="with lines"			\
PLOT_XTIC_SECONDS=14400				\
PLOT_MINOR_XTICS=4				\
    gnuplot power.plot

cat $tenminutelogs | ./plotfix -i 10  >$IRM_tmp/week_wH
rm -f $IRM_tmp/week_power.*.png
PLOT_TITLE="Last 7 days"			\
PLOT_DATAFILE=$IRM_tmp/week_wH			\
PLOT_OUTPUT=$IRM_tmp/week_power.$which.png	\
PLOT_wH_MINUTES=10				\
PLOT_MAX_wH=5000				\
PLOT_WITHSTYLE="with lines"			\
PLOT_XTIC_SECONDS=43200				\
PLOT_MINOR_XTICS=2				\
    gnuplot power.plot


# create index.html from template
fix_index()
{
    sed -e "s/DATETIME/$(date +'%a, %d %b %Y %H:%M:%S %Z')/" \
	-e "s/WHICH/$which/g" \
	-e "s/WATTSNOW/$(<watts_now)/g" \
	-e "s/NOW/$(echo $(date +'%A %m\/%d at %H:%M'))/"
}

fix_index <index.html.template >$IRM_tmp/index.html

# copy to remote webserver, using ssh
if [ "$IRM_ssh_to_remote" = true ]
then
    ssh -x -p $IRM_sshport -q $IRM_sshuser@$IRM_sshhost \
    	"rm $IRM_webdir/*power.*.png"
    scp -P $IRM_sshport -q $IRM_tmp/*power.$which.png \
    	$IRM_sshuser@$IRM_sshhost:$IRM_webdir
    scp -P $IRM_sshport -q $IRM_tmp/index.html \
    	$IRM_sshuser@$IRM_sshhost:$IRM_webdir/power.html
    scp -P $IRM_sshport -q watts_now \
    	$IRM_sshuser@$IRM_sshhost:$IRM_webdir/watts_now.html 
fi

# copy locally
if [ "$IRM_cp_to_local" = true ]
then
    rm $IRM_local_dest/*power.*.png
    cp $IRM_tmp/*power.$which.png $IRM_local_dest
    cp $IRM_tmp/index.html $IRM_local_dest
    cp watts_now $IRM_local_dest/watts_now.html 
fi
